from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils import markdown
from aiogram.fsm.context import FSMContext
from aiogram import Bot
import app.keyboards as kb
import app.states as st
import app.api.response as api_res

router = Router()


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
async def create_keyboard(items):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for item in items:
        keyboard.add(KeyboardButton(item['name']))
    return keyboard


#–°—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message:Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Çüëã\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—éüîç',
                        reply_markup=kb.start)


#–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ===========================================================================================


@router.message(lambda message: message.text == "–ü–∞—Ä—Å–∏—Ä–æ–≤–∞—Ç—å")
async def parsing_start(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é', reply_markup=kb.quantity_selection)

@router.message(lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def pasring_continuation(message: Message):
    response, error = api_res.parsing(None)
    if response:
        await message.answer(f'‚úÖ{response}', reply_markup=kb.start)
    elif error:
        await message.answer(f'‚ùó{error}', reply_markup=kb.start)

@router.message(lambda message: message.text == "–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def get_products_count_start(message: Message, state: FSMContext):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup=kb.cancel)
    await state.set_state(st.Parsing.wait_products_count)
    

@router.message(st.Parsing.wait_products_count)
async def get_products_count(message: Message, state: FSMContext):
    try:
        products_count = int(message.text)
        if 0 < products_count <= 50:
            response, error = api_res.parsing(products_count)
            if response:
                await message.answer(f'‚úÖ{response}', reply_markup=kb.start)
                await state.clear()
            elif error:
                await message.answer(f'‚ùó{error}', reply_markup=kb.start)
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50', reply_markup=kb.cancel)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=kb.cancel)


#–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞===========================================================================================


@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def get_products_list(message: Message):
    
    products_list = api_res.get_products_list()
    if products_list is not None:
        if products_list != []:
            await message.answer("üõí*–¢–æ–≤–∞—Ä—ã:*\n\n", parse_mode="Markdown", reply_markup=await kb.inline_products(products_list))
        else:
            await message.answer("*üîé–î–µ–∂—É—Ä—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*", parse_mode="Markdown")
    else:
        await message.answer("‚ùó–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda query: query.data.startswith('product_'))
async def select_product(call: CallbackQuery, bot: Bot):
    product_id = call.data.split('_')[1]
    
    product = api_res.get_product(product_id)
    if product:
        msg = 'üõí*–¢–æ–≤–∞—Ä:*\n\n' + f"*‚Ññ{product['id']}* {product['name']} üí∏*{product['price']}‚ÇΩ* üìâ*{product['discount']}*"
        try:
            await call.message.answer_photo(photo=f"{product['image']}", caption=msg, parse_mode="Markdown")
        except:
            await call.message.answer(msg, parse_mode="Markdown")
    else:
        await call.message.answer(f'‚ùó–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    await call.answer()

    
@router.callback_query(F.data == 'cancel')
async def catalog(callback:CallbackQuery, state: FSMContext):
    await state.clear() #–û—á–∏—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await callback.message.edit_text('‚úÖ–û—Ç–º–µ–Ω–µ–Ω–æ')


